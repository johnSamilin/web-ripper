# =============================================================================
# WEB RIPPER - Environment Configuration
# =============================================================================
# Copy this file to .env and configure your settings
# Never commit .env to version control - it contains sensitive information

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================

# Port for the backend server (use 3001 for development, 80 for production)
PORT=3001

# Enable HTTP/2 with HTTPS (requires SSL certificates)
# Set to true for HTTP/2, false for HTTP/1.1
USE_HTTP2=true

# SSL certificate directory (for HTTP/2)
CERT_PATH=./certs

# Environment mode (development, production, test)
NODE_ENV=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# SQLite database file path (relative to project root)
DATABASE_PATH=./database.sqlite

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# JWT secret key for authentication tokens
# IMPORTANT: Generate a strong, unique secret for production
# You can use: openssl rand -base64 32
JWT_SECRET=your-super-secret-jwt-key-here-change-this-in-production

# =============================================================================
# RATE LIMITING
# =============================================================================

# Rate limiting window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per window per IP
RATE_LIMIT_MAX_REQUESTS=100

# Maximum authentication attempts per window per IP
AUTH_RATE_LIMIT_MAX=5

# =============================================================================
# CONTENT EXTRACTION
# =============================================================================

# Timeout for webpage extraction in milliseconds
EXTRACTION_TIMEOUT=30000

# Maximum content length for requests
MAX_CONTENT_LENGTH=10mb

# =============================================================================
# WEBDAV CONFIGURATION (Optional)
# =============================================================================

# Base path for WebDAV storage (where files will be organized)
WEBDAV_BASE_PATH=/web-ripper

# Whether to organize files by date (true/false)
# If true, files will be stored in YYYY/MM/ subdirectories
ORGANIZE_BY_DATE=true

# =============================================================================
# CORS CONFIGURATION
# =============================================================================

# Allowed origin for CORS requests
# For development, use the Vite dev server URL
# For production, use your frontend domain
# Use https:// when USE_HTTP2=true
CORS_ORIGIN=https://localhost:5173

# =============================================================================
# WEBDAV TESTING (Optional - for CLI scripts)
# =============================================================================

# =============================================================================
# EXTRACTION MODES
# =============================================================================

# Content extraction method (cheerio, monolith)
# - cheerio: Built-in JavaScript extraction (default, faster)
# - monolith: External monolith tool (better for complex sites, requires monolith binary)
EXTRACTION_MODE=cheerio

# Path to monolith binary (only needed if EXTRACTION_MODE=monolith)
# Leave empty to use system PATH
MONOLITH_PATH=

# Monolith extraction options
MONOLITH_TIMEOUT=60000
MONOLITH_USER_AGENT=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36

# These are only used for running CLI scripts like CSS cleanup
# Users configure their WebDAV settings through the web interface

# WebDAV server URL (include full path like /dav or /webdav if needed)
# Examples:
# - https://webdav.cloud.mail.ru/
# - https://webdav.yandex.ru/
# - https://dav.box.com/dav/
# - https://your-nextcloud.com/remote.php/dav/files/username/
WEBDAV_URL=

# WebDAV username
WEBDAV_USERNAME=

# WebDAV password
WEBDAV_PASSWORD=

# =============================================================================
# POPULAR WEBDAV PROVIDERS
# =============================================================================

# Here are some popular WebDAV providers you can use:
#
# 1. Mail.ru Cloud:
#    URL: https://webdav.cloud.mail.ru/
#    Setup: Enable WebDAV in settings, use your email and password
#
# 2. Yandex.Disk:
#    URL: https://webdav.yandex.ru/
#    Setup: Enable WebDAV in settings, use your Yandex credentials
#
# 3. Box.com:
#    URL: https://dav.box.com/dav/
#    Setup: Use your Box.com credentials
#
# 4. Nextcloud/ownCloud:
#    URL: https://your-server.com/remote.php/dav/files/username/
#    Setup: Use your Nextcloud/ownCloud credentials
#
# 5. 4shared:
#    URL: https://webdav.4shared.com/
#    Setup: Use your 4shared credentials

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================

# For development:
# 1. Copy this file to .env
# 2. Set NODE_ENV=development
# 3. Configure JWT_SECRET (generate a random string)
# 4. Optionally add OpenAI API key for AI tagging
# 5. Configure WebDAV if you want cloud storage features

# For production:
# 1. Set NODE_ENV=production
# 2. Use a strong, unique JWT_SECRET
# 3. Configure proper CORS_ORIGIN
# 4. Set up proper rate limiting values
# 5. Use HTTPS for WebDAV URLs
# 6. Consider using environment-specific database paths

# =============================================================================
# SECURITY BEST PRACTICES
# =============================================================================

# 1. Never commit .env files to version control
# 2. Use strong, unique secrets for JWT_SECRET
# 3. Use HTTPS in production
# 4. Regularly rotate API keys and secrets
# 5. Use environment-specific configurations
# 6. Limit CORS origins to trusted domains only
# 7. Set appropriate rate limits for your use case
# 8. Use secure WebDAV connections (HTTPS)